<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kzm.blog.mapper.user.UserMapper">
    <resultMap id="BaseResult" type="com.kzm.blog.common.entity.User.UserEntity">
        <id property="id" column="id"></id>
        <result property="account" column="account"></result>
        <result property="password" column="password"></result>
        <result property="avatar" column="avatar"></result>
        <result property="email" column="email"></result>
        <result property="sex" column="sex"></result>
        <result property="personLink" column="person_link"></result>
        <result property="birthday" column="birthday"></result>
        <result property="company" column="company"></result>
        <result property="school" column="school"></result>
        <result property="github" column="github"></result>
        <result property="qq" column="qq"></result>
        <result property="nickname" column="nickname"></result>
        <result property="motto" column="motto"></result>
        <result property="salt" column="salt"></result>
        <result property="status" column="status"></result>
    </resultMap>

    <sql id="Base_Column_List">
        id,account,password,avatar,email,sex,person_link,birthday,company,
        school,github,qq,nickname,motto,salt,status
    </sql>
    <insert id="insertUserLikeRelation">
        insert into
        user_user_like(from_user_id,to_user_id,status,create_time,update_time)
        values(#{fromId},#{toId},1,now(),now())
    </insert>
    <insert id="addBackUserRole">
        insert into
        user_role(user_id,role_id)
        values(#{userId},#{roleId})
    </insert>
    <update id="updateUserLikeRelation">
        update
        user_user_like set status=#{status} where from_user_id=#{fromId} and to_user_id=#{toId}
    </update>
    <update id="updateUserRole">
        update user_role
        set role_id=#{roleId}
        where user_id=#{userId}
    </update>
    <select id="getIdByAccount" resultType="java.lang.Integer">
        select id from  sys_user where account=#{userName}
    </select>
    <select id="selectUserRecommend" resultType="com.kzm.blog.common.entity.User.vo.UserRecommendVo">
     select
        su.id,
       su.nickname  as  nickName,
       su.avatar,
      count(sf.id) as  fansNum
      from sys_user su inner join sys_flow  sf on sf.followed_id=su.id  order by fansNum limit 5
         </select>
    <select id="getFerralUser" resultType="com.kzm.blog.common.entity.User.vo.UserFerralVo">
        select
        su.id,
        su.avatar,
        su.nickname,
        count(uul.id) as likeNum
        from sys_user su left join user_user_like uul on su.id=uul.to_user_id and uul.status=1
        <where>
            su.id in
            <foreach collection="ids" open="(" separator="," close=")" item="item" index="index">
                #{item}
            </foreach>
            group by su.id
        </where>
    </select>
    <select id="selectUnLikeUser" resultType="java.lang.Integer">
        select
        to_user_id as id
        from user_user_like where  to_user_id !=#{userId} and from_user_id=#{userId}  and status=1
        group by to_user_id
    </select>
    <select id="selectLikeCount" resultType="java.lang.Integer">
      select count(*)
      from user_user_like where from_user_id=#{fromId} and to_user_id=#{toId}
    </select>
    <select id="selectIsLikeCount" resultType="java.lang.Integer">
        select
        count(*)
        from user_user_like where from_user_id=#{fromId} and to_user_id=#{toId} and status=1
    </select>
    <select id="getUserRoles" resultType="java.lang.String">
       select
       r.role_name
       from
       user_role ur inner join role r on  ur.role_id=r.role_id where ur.user_id=#{userId}
    </select>

    <select id="getUserPermissions" resultType="java.lang.String">
     SELECT
	 DISTINCT m.perms
     FROM
     sys_user u left JOIN  user_role ur
	 ON u.id=ur.user_id LEFT JOIN role_menu rm
	 ON ur.role_id=rm.role_id LEFT JOIN menu  m ON
	 rm.menu_id=m.menu_id
     WHERE
	 ur.user_id =#{userId}
	 AND m.PERMS IS NOT null
    </select>

    <select id="getAllUser" resultType="com.kzm.blog.common.entity.User.vo.UserListVo">
        select
        id,
        nickname,
        email,
        avatar,
        status,
        create_time
        from sys_user
        <where>
            <if test="userBo.nickname !=null and userBo.nickname!=''">
                nickname like concat('%',#{userBo.nickname},'%')
            </if>
            <if test="userBo.status !=null">
                and status=#{userBo.status}
            </if>
        </where>
    </select>
    <select id="getArtcileCount" resultType="java.lang.Integer">
        select
        count(1)
        from  sys_user  su inner join article a on  su.id=a.author_id
        where su.id=#{id}
    </select>
    <select id="getAllBackUser" resultType="com.kzm.blog.common.entity.User.vo.UserListVo">
        select
        u.id,
        u.nickname,
        u.email,
        u.avatar,
        u.status,
        r.role_name as roleName,
        u.create_time
        from sys_user u left join user_role ur on u.id=ur.user_id inner join role r on ur.role_id=r.role_id
        <where>
            ur.role_id is not null
            <if test="userBo.nickname !=null and userBo.nickname!=''">
                and nickname like concat('%',#{userBo.nickname},'%')
            </if>
            <if test="userBo.status !=null">
                and status=#{userBo.status}
            </if>
        </where>
    </select>
    <select id="getArticleRecent" resultType="com.kzm.blog.common.entity.article.vo.ArticleRecentVo">
        select
       id,
       title,
       description as summary,
       read_num,
       comment_num,
       update_time
       from  article
       where  author_id=#{id} and
        date_sub(curdate(),interval 30 day) &lt;= date(update_time)
        order by  update_time desc
    </select>
    <select id="selectUserLike" resultType="com.kzm.blog.common.entity.User.vo.UserLikeVo">
        select
        uul.id,
        su.avatar,
        su.nickname,
        su.motto,
        uul.to_user_id,
        uul.create_time,
        uul.update_time
        from user_user_like uul left join
        sys_user su on uul.to_user_id=su.id
        where uul.from_user_id=#{fromId}
        and  date_sub(curdate(),interval 60 day) &lt;= date(uul.update_time)
    </select>
    <select id="selectLikeNumById" resultType="java.lang.Integer">
        select
        count(1)
        from user_user_like where status=1
        and to_user_id=#{userId}
    </select>
    <select id="selectMyNewCommentArticle" resultType="com.kzm.blog.common.entity.article.vo.ArticleRecentVo">
        SELECT
        a.id,
        a.title,
        a.description as summary,
        a.read_num,
        a.comment_num,
        a.update_time
        FROM
        comment c inner JOIN article a on c.owner_id=a.id
        WHERE a.author_id=#{userId}
         AND date_sub(curdate(),interval 7 day) &lt;= date(c.create_time)
        GROUP BY a.id
        ORDER BY a.update_time desc
    </select>


</mapper>